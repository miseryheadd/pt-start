version: '3'
services:
  bot:
    build: ./bot
    container_name: bot
    environment:
      TOKEN: ${TOKEN}
      RM_HOST: ${RM_HOST}
      RM_PORT: ${RM_PORT}
      RM_USER: ${RM_USER}
      RM_PASSWORD: ${RM_PASSWORD}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
    networks:
      mynetwork:
        ipv4_address: 10.0.0.2

  db:
    build:
      context: ./db
    container_name: db
    environment:
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        POSTGRES_DB: ${DB_DATABASE}
        POSTGRES_REPL_USER: ${DB_REPL_USER}
        POSTGRES_REPL_PASSWORD: ${DB_REPL_PASSWORD}
        POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
        POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"

    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:5432"
    networks:
      mynetwork:
        ipv4_address: 10.0.0.3
    user: ${DB_USER}
    command: |
      postgres
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on 

  db_repl:
    build: ./db_repl
    container_name: db_repl
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    ports:
      - "${DB_REPL_PORT}:5432"
    networks:
      mynetwork:
        ipv4_address: 10.0.0.4
    user: ${DB_USER}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=10.0.0.3 --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db

networks:
  mynetwork:
    ipam:
      driver: default
      config:
        - subnet: "10.0.0.0/16"
